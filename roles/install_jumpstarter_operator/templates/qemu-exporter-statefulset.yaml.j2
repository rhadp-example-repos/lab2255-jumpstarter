apiVersion: v1
kind: Namespace
metadata:
  name: "{{ jumpstarter_qemu_exporter_namespace }}"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: "{{ jumpstarter_qemu_exporter_namespace }}"
  name: qemu-exporter
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: "{{ jumpstarter_qemu_exporter_namespace }}"
  name: qemu-exporter-role
rules:
  - apiGroups: ["jumpstarter.dev"]
    resources: ["exporters"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: "{{ jumpstarter_qemu_exporter_namespace }}"
  name: qemu-exporter-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: qemu-exporter-role
subjects:
  - kind: ServiceAccount
    name: qemu-exporter
    namespace: "{{ jumpstarter_qemu_exporter_namespace }}"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: "{{ jumpstarter_qemu_exporter_namespace }}"
  name: qemu-exporter
spec:
  serviceName: qemu-exporter
  replicas: 3
  selector:
    matchLabels:
      exporter-mock: qemu
  template:
    metadata:
      labels:
        exporter-mock: qemu
    spec:
      tolerations:
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
      serviceAccountName: qemu-exporter
      restartPolicy: Always
      volumes:
        - name: shared
          emptyDir: {}
        - name: dev-vhost-vsock
          hostPath:
            path: /dev/vhost-vsock
            type: CharDevice
      initContainers:
        - name: jumpstarter-init
          image: quay.io/jumpstarter-dev/jumpstarter-utils:latest # TODO: pin image version
          volumeMounts:
            - mountPath: /shared
              name: shared
          command:
            - /bin/bash
            - -c
            - |
              set -exo pipefail

              kubectl apply -f - << EOF
              apiVersion: jumpstarter.dev/v1alpha1
              kind: Exporter
              metadata:
                namespace: $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
                name: $(cat /etc/hostname)
                labels:
                  example.com/board: qemu
              spec:
                username: kubernetes:$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
              EOF

              while [ -z "$ENDPOINT" ]
              do
                ENDPOINT=$(kubectl get -n $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) \
                  exporters.jumpstarter.dev $(cat /etc/hostname) -o jsonpath="{.status.endpoint}")
                sleep 1s
              done
              echo "$ENDPOINT" > /shared/endpoint
      containers:
        - name: jumpstarter-exporter
          image: quay.io/ncao/jumpstarter:summit # TODO: use an arm based image
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /shared
              name: shared
            - mountPath: /dev/vhost-vsock
              name: dev-vhost-vsock
          env:
            - name: JUMPSTARTER_GRPC_INSECURE
              value: "1"
          command:
            - /bin/bash
            - -c
            - |
              set -euxo pipefail

              cat <<EOF > qemu.yaml
              apiVersion: jumpstarter.dev/v1alpha1
              kind: ExporterConfig
              metadata:
                namespace: $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
                name: $(cat /etc/hostname)
              endpoint: $(cat /shared/endpoint)
              token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              export:
                qemu:
                  type: jumpstarter_driver_qemu.driver.Qemu
              EOF

              jmp run --exporter-config qemu.yaml
