# Implement your post-install deployment tasks here
# -------------------------------------------------

# create the example exporter if it does not exist first !

- name: copy exporter config script
  ansible.builtin.copy:
    src: "../files/exporter_config.sh"
    dest: "{{ work_dir }}/exporter_config.sh"
    mode: "0755"

- name: create jumpstarter mock config
  shell: ./exporter_config.sh
  args:
    chdir: "{{ work_dir }}"

- name: read the exporter config
  slurp:
    src: "{{ work_dir }}/outpost-mock-exporter.yaml"
  register: exporter_file

- name: parse the exporter config
  set_fact:
    exporter_config: "{{ exporter_file.content | b64decode | from_yaml }}"

- name: patch exporter config
  set_fact: 
    exporter_config: "{{ exporter_config | combine({'export': {'storage': {'type':'jumpstarter_driver_opendal.driver.MockStorageMux'},'power':{'type':'jumpstarter_driver_power.driver.MockPower'}}, 'tls': {'ca':'','insecure': 'true'}}) }}"

- name: write exporter config back
  ansible.builtin.copy:
    content: "{{ exporter_config | to_nice_yaml }}"
    dest: "{{ work_dir }}/outpost-mock-exporter.yaml"

- name: read the client config
  slurp:
    src: "$HOME/.config/jumpstarter/clients/outpost-mock.yaml"
  register: client_file

- name: parse the client config
  set_fact:
    client_config: "{{ client_file.content | b64decode | from_yaml }}"

- name: patch client config
  set_fact: 
    client_config: "{{ client_config | combine({'tls': {'ca':'','insecure': 'true'}}) }}"

- name: write client config back
  ansible.builtin.copy:
    content: "{{ client_config | to_nice_yaml }}"
    dest: "$HOME/.config/jumpstarter/clients/outpost-mock.yaml"